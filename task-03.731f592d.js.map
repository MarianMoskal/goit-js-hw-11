{"version":3,"sources":["js/task-03.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,aAIA,MAAMA,EAASC,IAEJ,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACzBC,WAAW,KAELF,EAAQF,GAEVG,EAAOH,IACVA,MAIHK,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAUjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAK1B,SAASC,EAAgBC,EAAUC,GACxB,OAAA,IAAId,QAASC,IAClBE,WAAW,KACFY,MAAAA,EAAeF,EAASG,IAAKC,GACjCA,EAAKP,OAASI,EACV,IAAKG,EAAMN,QAASM,EAAKN,QACzBM,GAEHhB,EAAQc,IAER,OAKZH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAW5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACUmB,KAAKE,SAAW,GAGjCvB,EAAQ,CAAE0B,GAAID,EAAYC,GAAItB,KAAMP,IAEpCI,EAAOwB,EAAYC,KAEpB7B,MAID8B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAI/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"task-03.731f592d.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// #1\n\nconst delay = (ms) => {\n  const isSuccess = true;\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (isSuccess) {\n              resolve(ms);\n            }\n            reject(ms);\n      }, ms);\n    })\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n\n\n\n\n\n// // #2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\n\n\nfunction toggleUserState(allUsers, userName) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n         const updatedUsers = allUsers.map((user) =>\n           user.name === userName\n             ? { ...user, active: !user.active }\n             : user);\n        \n            resolve(updatedUsers);\n            \n         }, 2000);\n    })\n  };\n\n \ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n\n\n\n\n\n\n// // #3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n})\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// // The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\n\n\n\n\n\n"]}